import * as core from '@actions/core'
import { context, getOctokit } from '@actions/github'
import { TestRun } from '../client/entity.js'
import { APP_URL } from '../client/constants.js'

const resultEmoji = {
  Pending: 'üîÑ',
  Passed: '‚úÖ',
  Failed: '‚ùå',
  Skipped: '‚è≠Ô∏è'
}

export interface Config {
  token: string
}

export interface CommentConfig {
  commitSHA: string
  testSuiteID: string
  testSuiteName: string
  testSuiteRun: TestRun
}

export class Github {
  private core: ReturnType<typeof getOctokit>

  constructor(config: Config) {
    this.core = getOctokit(config.token)
  }

  async comment(config: CommentConfig) {
    // core.info(`config: ${JSON.stringify(config)}`)

    let issue_number = context.payload.pull_request?.number
    if (!issue_number) {
      if (config.commitSHA) {
        const { data: pull_requests } =
          await this.core.rest.repos.listPullRequestsAssociatedWithCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: config.commitSHA
          })

        // core.info(`pull_requests: ${JSON.stringify(pull_requests)}`)

        // Filter for open pull requests
        const openPRs = pull_requests.filter((pr) => pr.state === 'open')
        if (openPRs.length > 0) {
          issue_number = openPRs[0].number
        }
      }
    }

    core.info(`issue_number: ${issue_number}`)

    // ignore if the pull request is not a PR
    if (!issue_number) {
      return
    }

    const commentIdentifier = `<!-- shiplight_${config.testSuiteID} -->`

    const testSuiteURL = `${APP_URL}/test-suites/${config.testSuiteID}`
    const testSuiteRunResultURL = `${APP_URL}/run-results/${config.testSuiteRun?.id}`

    const name = `[${config.testSuiteName}](${testSuiteURL})`
    const result = `${resultEmoji[config.testSuiteRun?.result]} ${config.testSuiteRun?.result} ([Inspect](${testSuiteRunResultURL}))`
    const startTime = config.testSuiteRun?.startTime
      ? new Date(config.testSuiteRun.startTime).toLocaleString('en-US', {
          timeZone: 'UTC'
        })
      : '-'
    const endTime = config.testSuiteRun?.endTime
      ? new Date(config.testSuiteRun.endTime).toLocaleString('en-US', {
          timeZone: 'UTC'
        })
      : '-'

    const body = `${commentIdentifier}
# [Shiplight](https://app.shiplight.ai) Runner

| Name | Result | Start Time (UTC) | End Time (UTC) |
| :--- | :----- | :------ | :------ |
| ${name} | ${result} | ${startTime} | ${endTime} |

---
_This comment was automatically generated by [Shiplight GitHub Action](https://github.com/marketplace/actions/shiplight-runner)_
`

    // check if the comment already exists
    const comments = await this.core.rest.issues.listComments({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: issue_number
    })
    const commit = comments.data.find((comment) =>
      comment.body?.startsWith(commentIdentifier)
    )
    if (commit?.id) {
      // update the comment
      await this.core.rest.issues.updateComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        comment_id: commit.id,
        body
      })
    } else {
      // create a new comment
      await this.core.rest.issues.createComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        issue_number: issue_number,
        body
      })
    }
  }
}
